# -*- coding: utf-8 -*-
"""20210440_Sentiment analysis Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rWhqErU9IOzGY4vD2W4LqAh2jek4Eess
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, LSTM, Dense
from tensorflow.keras.datasets import imdb
from tensorflow.keras.callbacks import EarlyStopping

vocab_size = 10000
max_length = 100

(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=vocab_size)

x_train = pad_sequences(x_train, maxlen=max_length)
x_test = pad_sequences(x_test, maxlen=max_length)

print(f"x_train shape: {x_train.shape}")
print(f"x_test shape: {x_test.shape}")

early_stopping = EarlyStopping(monitor="val_loss", patience=2, restore_best_weights=True)

def train_model(model_name, model):
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    history = model.fit(
        x_train, y_train, epochs=5, batch_size=64,
        validation_data=(x_test, y_test), callbacks=[early_stopping], verbose=1
    )
    loss, accuracy = model.evaluate(x_test, y_test)
    print(f'{model_name} Test Accuracy: {accuracy:.4f}')
    return history

simple_rnn_model = Sequential([
    Embedding(input_dim=vocab_size, output_dim=128, input_length=max_length),
    SimpleRNN(128, return_sequences=False),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

lstm_model = Sequential([
    Embedding(input_dim=vocab_size, output_dim=128, input_length=max_length),
    LSTM(128, return_sequences=False),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

history_rnn = train_model("Simple RNN", simple_rnn_model)
history_lstm = train_model("LSTM", lstm_model)

print("\n================ Accuracy Comparison ================")
print(f"Simple RNN Test Accuracy: {history_rnn.history['accuracy'][-1]:.4f}")
print(f"LSTM Test Accuracy: {history_lstm.history['accuracy'][-1]:.4f}")
print("====================================================")

def plot_history(history_rnn, history_lstm, metric, title):
    plt.plot(history_rnn.history[metric], label='Simple RNN ' + metric)
    plt.plot(history_lstm.history[metric], label='LSTM ' + metric)
    plt.xlabel('Epochs')
    plt.ylabel(metric.capitalize())
    plt.title(title)
    plt.legend()
    plt.show()

plot_history(history_rnn, history_lstm, 'accuracy', 'Model Accuracy Comparison')
plot_history(history_rnn, history_lstm, 'loss', 'Model Loss Comparison')

